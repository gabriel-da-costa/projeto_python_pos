"""
Interface de usu√°rio com Streamlit para consumir a API FastAPI.

Esta aplica√ß√£o web permite:
1. Visualizar as principais m√©tricas de vendas obtidas da API.
2. Testar o endpoint de soma atrav√©s de um formul√°rio.
3. Ver um gr√°fico de histograma da distribui√ß√£o de pre√ßos dos produtos.
"""
import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# URL base da API (deve estar rodando localmente)
API_URL = "http://127.0.0.1:8000"
DATA_URL = "data/dados.csv"

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Dashboard de Vendas",
    page_icon="üìä",
    layout="wide"
)

# --- Fun√ß√µes Auxiliares ---
def get_stats_from_api():
    """Busca as estat√≠sticas do endpoint /stats da API."""
    try:
        response = requests.get(f"{API_URL}/stats")
        response.raise_for_status()  # Lan√ßa exce√ß√£o para status de erro (4xx ou 5xx)
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"N√£o foi poss√≠vel conectar √† API. Verifique se ela est√° rodando. Erro: {e}")
        return None

def post_soma_to_api(x, y):
    """Envia uma requisi√ß√£o de soma para o endpoint /soma da API."""
    try:
        payload = {"x": x, "y": y}
        response = requests.post(f"{API_URL}/soma", json=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"Erro ao chamar o endpoint de soma: {e}")
        return None

# --- Interface Principal ---
st.title("üìä Dashboard de An√°lise de Vendas")
st.markdown("Esta interface consome os dados da API FastAPI para apresentar as m√©tricas de forma visual.")

# Busca os dados da API
stats = get_stats_from_api()

if stats:
    st.header("M√©tricas Principais")
    
    # Exibe as m√©tricas em colunas
    col1, col2, col3 = st.columns(3)
    col1.metric("Receita Total", f"R$ {stats.get('receita_total', 0):,.2f}")
    col2.metric("Quantidade Vendida", f"{stats.get('qtd_total', 0):,}")
    col3.metric("Pre√ßo M√©dio por Item", f"R$ {stats.get('preco_medio', 0):.2f}")
    
    st.markdown("---")
    
    # --- Se√ß√£o do Desafio de Programa√ß√£o Funcional ---
    st.header("Resultado do Desafio FP")
    fp_stats = stats.get('desafio_fp', {})
    
    fp_col1, fp_col2, fp_col3 = st.columns(3)
    fp_col1.metric("Soma dos Quadrados", f"{fp_stats.get('soma_quadrados', 0):,}")
    fp_col2.metric("Contagem de Itens", f"{fp_stats.get('contagem', 0):,}")
    fp_col3.metric("M√©dia Inteira", f"{fp_stats.get('media_inteira', 0):,}")

    st.markdown("---")

    # --- Se√ß√£o de Gr√°ficos e Testes ---
    left_col, right_col = st.columns(2)

    with left_col:
        st.header("Histograma de Pre√ßos")
        try:
            df = pd.read_csv(DATA_URL)
            fig, ax = plt.subplots()
            sns.histplot(df['preco'], bins=20, kde=True, ax=ax)
            ax.set_title("Distribui√ß√£o de Pre√ßos dos Produtos")
            ax.set_xlabel("Pre√ßo (R$)")
            ax.set_ylabel("Frequ√™ncia")
            st.pyplot(fig)
        except FileNotFoundError:
            st.warning(f"Arquivo de dados '{DATA_URL}' n√£o encontrado para gerar o gr√°fico.")
        except Exception as e:
            st.error(f"Ocorreu um erro ao gerar o gr√°fico: {e}")
    
    with right_col:
        st.header("Testar a API: Endpoint /soma")
        with st.form("soma_form"):
            num1 = st.number_input("Primeiro n√∫mero (x)", value=10.5)
            num2 = st.number_input("Segundo n√∫mero (y)", value=5.5)
            submitted = st.form_submit_button("Calcular Soma via API")
            
            if submitted:
                with st.spinner("Calculando..."):
                    result = post_soma_to_api(num1, num2)
                    if result:
                        st.success(f"O resultado da soma √©: **{result.get('resultado')}**")
else:
    st.warning("Aguardando conex√£o com a API para exibir os dados...")
